/*
 *  PWM Outputs / Example of light control with PWM
 **********************************************************************
 *  Engineer training / Digital Interfaces
 **********************************************************************
 *    LEnsE / Institut d'Optique / https://lense.institutoptique.fr/ 
 *    Author : Julien VILLEMEJANE / 14/sep/2024
 */

#define   ANALOG3   PB0
#define   LED2      PB4

int val = 0;
uint32_t channelLED2;
HardwareTimer *timerLED2;
int freqLED2 = 485;

/* SETUP FUNCTION */
void setup() {
  pinMode(LED2, OUTPUT);
  Serial.begin(9600);
  timerLED2 = initPWM(LED2, &channelLED2);
  Serial.println("Channel = " + String(channelLED2));
  delay(1000);
}

/* MAIN LOOP */
void loop() {
  val = analogRead(ANALOG3);  
  Serial.println("ADC value = " + String(val));
  val = val * 100 / 1023;
  setPWMout(LED2, channelLED2, freqLED2, val, timerLED2);
  Serial.println("Calculated value = " + String(val));
}


HardwareTimer* initPWM(byte pin, uint32_t *channel){
  // Automatically retrieve TIM instance and channel associated to pin
  // This is used to be compatible with all STM32 series automatically.
  TIM_TypeDef *Instance = (TIM_TypeDef *)pinmap_peripheral(digitalPinToPinName(pin), PinMap_PWM);
  *channel = STM_PIN_CHANNEL(pinmap_function(digitalPinToPinName(pin), PinMap_PWM));
  // Instantiate HardwareTimer object. Thanks to 'new' instantiation, HardwareTimer is not destructed when setup() function is finished.
  HardwareTimer *MyTim = new HardwareTimer(Instance);
  return MyTim;
}

void setPWMout(byte pin, uint32_t channel, int frequency, int dutycycle, HardwareTimer *MyTim){
  /* frequency is in Hz / dutycycle is a value between 0 and 100 */
  MyTim->setPWM(channel, pin, frequency, dutycycle); 
}



/*
  All-in-one setPWM
  This example shows how to configure a PWM with HardwareTimer in one single function call.
  PWM is generated on `LED_BUILTIN` if available.
  No interruption callback used: PWM is generated by hardware.
  Once configured, there is no CPU load.
*/

/*
  Note: Please verify that 'pin' used for PWM has HardwareTimer capability for your board
  This is specially true for F1 serie (BluePill, ...)
*/
/*
#if defined(LED_BUILTIN)
#define pin  LED_BUILTIN
#else
#define pin  D2
#endif

void setup()
{
  // no need to configure pin, it will be done by HardwareTimer configuration
  // pinMode(pin, OUTPUT);

  // Automatically retrieve TIM instance and channel associated to pin
  // This is used to be compatible with all STM32 series automatically.
  TIM_TypeDef *Instance = (TIM_TypeDef *)pinmap_peripheral(digitalPinToPinName(pin), PinMap_PWM);
  uint32_t channel = STM_PIN_CHANNEL(pinmap_function(digitalPinToPinName(pin), PinMap_PWM));


  // Instantiate HardwareTimer object. Thanks to 'new' instantiation, HardwareTimer is not destructed when setup() function is finished.
  HardwareTimer *MyTim = new HardwareTimer(Instance);

  // Configure and start PWM
  // MyTim->setPWM(channel, pin, 5, 10, NULL, NULL); // No callback required, we can simplify the function call
  MyTim->setPWM(channel, pin, 5, 10); // 5 Hertz, 10% dutycycle
}

*/